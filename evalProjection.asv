% Script to evalute the projected surfacing points of the gliders
% saves a CSV into the OBS lab's Locness/Data directory

% Import data
filepath = '/Volumes/ProjectLibrary/901805_Coastal_Biogeochemical_Sensing/Locness/Data/GliderProjectionResults/';
%filepath = '\\atlas.shore.mbari.org\ProjectLibrary\901805_Coastal_Biogeochemical_Sensing\Locness\Data\GliderProjectionResults\';

% Find all *_projections.csv files in the directory
files = dir(fullfile(filepath, '*_projections.csv'));

opts = delimitedTextImportOptions("NumVariables", 11);opts.DataLines = [2, Inf]; opts.Delimiter = ",";opts.VariableNames = ["SNID", "sdn", "lat", "lon", "lastwptlat", "lastwptlon",   "nxtsurface_proj", "nxtlat_proj", "nxtlon_proj",    "nxtwptlat", "nxtwptlon"];
opts.VariableTypes = repmat("double", 1, 11);opts.ExtraColumnsRule = "ignore";opts.EmptyLineRule = "read";opts = setvaropts(opts, "SNID", "TrimNonNumeric", true);opts = setvaropts(opts, "SNID", "ThousandsSeparator", ",");

% Preallocate cell array or struct to hold all tables
allTables = cell(length(files), 1);
tableNames = strings(length(files), 1);  % optional, to track names

% Loop through files and read each one
for k = 1:length(files)
    thisFile = fullfile(files(k).folder, files(k).name);
    allTables{k} = readtable(thisFile, opts);

    % Optional: store name of the file (without extension)
    [~, nameNoExt, ~] = fileparts(files(k).name);
    tableNames(k) = nameNoExt(1:5);
end

data = struct();
for k = 1:length(files)
    data.(tableNames(k)) = allTables{k};
end

% Clean up
clear opts files k thisFile nameNoExt allTables tableNames
%%
% Initialize combined table
allResults = [];

% Loop through glider data
gliderIDs = fieldnames(data);
for i = 1:length(gliderIDs)
    gID = gliderIDs{i};       % e.g., 'SN069'
    g = data.(gID);           % struct for this glider

    % Compute differences
    T = struct();
    T.gliderID = repmat(string(gID), length(g.sdn)-1, 1);
    T.surfTime = datetime(g.sdn(2:end), 'ConvertFrom', 'datenum');
    T.latDiff = g.lat(2:end) - g.nxtlat_proj(1:end-1);
    T.lonDiff = g.lon(2:end) - g.nxtlon_proj(1:end-1);
    T.distance_km = deg2km(distance(g.lat(2:end), g.lon(2:end), ...
                                 g.nxtlat_proj(1:end-1), g.nxtlon_proj(1:end-1)));
    T.timeDiffMin = (g.sdn(2:end) - g.nxtsurface_proj(1:end-1)) * 24 * 60; % convert days to min

    % Convert to table
    resultsTable = struct2table(T);

    % Create a variable in the workspace: resultsXXX
    gliderSuffix = extractAfter(gID, 'SN');  % e.g., '069'
    varName = ['results' gliderSuffix];
    assignin('base', varName, resultsTable);  % puts it in the base workspace

    % Append to allResults
    allResults = [allResults; resultsTable];
end

% Save combined results
%writetable(allResults, [filepath '\all_gliders_diffs.csv']);

% for mac
writetable(allResults, [filepath '/all_gliders_diffs.csv']);

%% make figures and save
% mask results before August 4th when significant improvements were made
d = results209.surfTime > datetime('04-Aug-2025 22:00:00');
e = results069.surfTime > datetime('04-Aug-2025 22:00:00');

figure(43); clf
%figure('Visible','off');
set(gcf, 'Position', [1     1   960   635])
sgtitle('Projected Surfacing Results')
subplot 211
plot(results069.surfTime(e), results069.timeDiffMin(e),'.','MarkerSize',20)
hold on; grid on
plot(results209.surfTime(d), results209.timeDiffMin(d),'^','LineWidth',2)
ylabel('real - proj. time (min)');
%ylim([-1 40])
set(gca,'FontSize',14)
txt = sprintf('SN069_{mean}: %.f%c%.f min\nSN209_{mean}: %.f%c%.f min',...
    nanmean(results069.timeDiffMin(e)),char(177),nanstd(results069.timeDiffMin(e)),...
    nanmean(results209.timeDiffMin(d)),char(177),nanstd(results209.timeDiffMin(d)));
text(datetime('04-Aug-2025 22:00:00'), -13,txt);
legend('SN069','SN209');

subplot 212
plot(results069.surfTime(e), 1000.*results069.distance_km(e),'.','MarkerSize',20)
hold on; 
plot(results209.surfTime(d), 1000.*results209.distance_km(d),'^','LineWidth',2)
ylabel('distance (m)')
txt = sprintf('SN069_{mean}: %.f%c%.f m\nSN209_{mean}: %.f%c%.f m',...
    1000.*nanmean(results069.distance_km(e)),char(177),1000.*nanstd(results069.distance_km(e)),...
    1000.*nanmean(results209.distance_km(d)),char(177),1000.*nanstd(results209.distance_km(d)));

text(datetime('04-Aug-2025 15:00:00'), 500,txt);

set(gca,'FontSize',12)
grid on
legend('SN069','SN209')
%ylim([-10 1000])

% saveas(gcf,[filepath '\projResults.png']);
% for mac
%saveas(gcf,[filepath '/projResults.png']);

%% plot as histogram
figure(44); clf
%figure('Visible','off');
set(gcf, 'Position', [1     1   960   635])
sgtitle('Projected Surfacing Results')
subplot 211
histogram(results069.timeDiffMin(e),10)
hold on; grid on
histogram(results209.timeDiffMin(d),10)

xlabel('real - proj. time (min)')
%ylim([0 13])
set(gca,'FontSize',12)
txt = sprintf('SN069_{mean}: %.f%c%.f min\nSN209_{mean}: %.f%c%.f min',...
    nanmean(results069.timeDiffMin(e)),char(177),nanstd(results069.timeDiffMin(e)),...
    nanmean(results209.timeDiffMin(d)),char(177),nanstd(results209.timeDiffMin(d)));
text(-13, 10, txt);

legend('SN069','SN209','Location','NW')

subplot 212
histogram(1000.*results069.distance_km(e),15)
hold on; 
histogram(1000.*results209.distance_km(d),15)
xlabel('distance (m)')

txt = sprintf('SN069_{mean}: %.f%c%.f m\nSN209_{mean}: %.f%c%.f m',...
    1000.*nanmean(results069.distance_km(e)),char(177),1000.*nanstd(results069.distance_km(e)),...
    1000.*nanmean(results209.distance_km(d)),char(177),1000.*nanstd(results209.distance_km(d)));

text(450, 25,txt);

set(gca,'FontSize',14)
grid on
legend('SN069','SN209')
%ylim([0 8])

% saveas(gcf,[filepath '/projResults_hist.png']);
% for mac
% saveas(gcf,[filepath '/projResults_hist.png']);

